apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  labels:
    app: jupyter
  name: jupyter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyter
  template:
    metadata:
      labels:
        app: jupyter
    spec:
      serviceAccountName: jupyter
      containers:
      - name: "main"
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /run/data-access/service-account.json
        - name: SPARK_EXECUTOR_IMAGE
          value: {{ .Values.spark.executor.image }}
        {{- range $key, $value := .Values.spark.executor.nodeSelector }}
        - name: SPARK_EXECUTOR_NODE_SELECTOR_KEY
          value: {{ $key }}
        - name: SPARK_EXECUTOR_NODE_SELECTOR_VALUE
          value: {{ $value }}
        {{- end }}
        image: {{ .Values.image }}
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 8888
        volumeMounts:
        - mountPath: "/run/data-access/"
          name: data-access
        {{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- end }}
        command: ["start.sh", "jupyter",  "lab", "--NotebookApp.token={{ .Values.token }}"]
        livenessProbe:
          httpGet:
            path: /robots.txt
            port: 8888
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 2
        readinessProbe:
          httpGet:
            path: /robots.txt
            port: 8888
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 2
      volumes:
      - name: data-access
        secret:
          secretName: data-access
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}

---

apiVersion: "v1"
kind: "Service"
metadata:
  labels:
    app: jupyter
  name: jupyter
spec:
  ports:
  - port: 8888
    name: jupyter
    targetPort: 8888
  selector:
    app: jupyter
  type: "NodePort"

---

{{ if .Values.ingress }}
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: jupyter
spec:
  backend:
    serviceName: jupyter
    servicePort: jupyter

{{ end }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jupyter

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jupyter
rules:
# pod get/watch is used to identify the container IDs of the current pod
# pod patch is used to annotate the step's outputs back to controller (e.g. artifact location)
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "*"
# logs get/watch are used to get the pods logs for script outputs, and for log archival
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - "*"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jupyter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jupyter
subjects:
- kind: ServiceAccount
  name: jupyter
---

