environments:
  prod:
    secrets:
    - "envs/{{ .Environment.Name }}/data-access-secrets.yaml"
    - "envs/{{ .Environment.Name }}/secrets.yaml"
    values:
    - "envs/values.yaml"
    - "envs/{{ .Environment.Name }}/values.yaml.gotmpl"
    - "envs/{{ .Environment.Name }}/images.yaml"
    - "envs/{{ .Environment.Name }}/node-selectors.yaml"

repositories:
- name: argo
  url: "https://argoproj.github.io/argo-helm"

helmDefaults:
  wait: true
  timeout: 300
  atomic: true
  cleanupOnFail: false
  kubeContext: {{ requiredEnv "KUBE_CONTEXT" }}

commonLabels:
  apps: comm-game

releases:
- name: data-access-secrets
  chart: charts/data-access-secrets
  values:
  - secrets: 
{{ toYaml .Values.dataAccessSecrets | indent 6 }}
- name: dcinside-crawler-major
  chart: charts/dcinside-crawler
  values:
  - dataBroker:
      bucket: comm-game
      prefix: datalake/json/dcinside/document/
      nodeSelector: 
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 8 }}
      #resources:
        #requests:
        #  memory: "100Mi"
        #  cpu: "50m"
    worker:
      image: {{ index .Values.images "dcinside-crawler" }}
      replicas: 8
      distribute: false
      delay: 200
      sleepDuration: 60000
      nodeSelector: 
{{ toYaml .Values.nodeSelectors.crawler | indent 8 }}
      resources:
        requests:
          memory: "10Mi"
          cpu: "10m"
    liveDirectory:
      image: {{ index .Values.images "dcinside-crawler" }}
      nodeSelector:
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 8 }}
      galleryKind: major
      #resources:
      #  requests:
      #    memory: "100Mi"
      #    cpu: "20m"
- name: dcinside-crawler-minor
  chart: charts/dcinside-crawler
  values:
  - dataBroker:
      bucket: comm-game
      prefix: datalake/json/dcinside/document/
      nodeSelector: 
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 8 }}
      #resources:
        #requests:
        #  memory: "100Mi"
        #  cpu: "50m"
    worker:
      image: {{ index .Values.images "dcinside-crawler" }}
      replicas: 8
      distribute: false
      delay: 200
      sleepDuration: 60000
      nodeSelector: 
{{ toYaml .Values.nodeSelectors.crawler | indent 8 }}
      resources:
        requests:
          memory: "10Mi"
          cpu: "10m"
    liveDirectory:
      image: {{ index .Values.images "dcinside-crawler" }}
      nodeSelector:
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 8 }}
      galleryKind: minor
      #resources:
      #  requests:
      #    memory: "100Mi"
      #    cpu: "20m"
- name: crawler-node-rotator
  chart: charts/crawler-node-rotator
  values:
  - image: {{ index .Values.images "crawler-node-rotator" }}
    nodeSelector: 
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 6 }}
    lifetimeMin: 60
    podLabel: "app=dc-crawler-worker"
    maxNodeCount: 4
- name: argo
  chart: argo/argo
  version: 0.15.2
  needs: [ argo-suppliment ]
  values:
  - singleNamespace: true
  - useDefaultArtifactRepo: true
  - artifactRepository:
      archiveLogs: true
      gcs:
        bucket: comm-game
        keyFormat: argo/artifacts/
        serviceAccountKeySecret:
          name: data-access
          key: "service-account.json"
  - server:
      nodeSelector: 
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 8 }}
  - controller:
      workflowDefaults:
        spec:
          serviceAccountName: 'argo-workflow'
          volumes:
          - name: 'data-access-secrets'
            secret: 
              secretName: 'data-access'
              defaultMode: 256
      nodeSelector: 
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 8 }}
- name: argo-suppliment
  chart: charts/argo-suppliment
  values:
  - serviceAccountName: argo-workflow
- name: jupyter
  installed: true
  chart: charts/jupyter
  version: 0.10.6
  values:
  - image: {{ index .Values.images "jupyter-singleuser" }}
    token: {{ .Values.jupyter.token | quote }}
    extraEnv:
      SPARK_EXTRA_CONFIGS: |
        spark.kubernetes.executor.secrets.data-access=/run/data-access/
    nodeSelector: 
{{ toYaml .Values.nodeSelectors.alwaysOn | indent 6 }}
    spark:
      executor:
        image: {{ index .Values.images "spark" }}
        nodeSelector: 
{{ toYaml .Values.nodeSelectors.etl | indent 10 }}
    service:
      type: NodePort
      nodePort: 30001
    #ingress:
      #host: jupyter.dcgle.com
- name: etl
  installed: true
  chart: charts/etl
  disableValidation: true
  needs: [ argo ]
  values:
  - images:
{{ toYaml .Values.images | indent 6 }}
    nodeSelector: 
{{ toYaml .Values.nodeSelectors.etl | indent 6 }}
